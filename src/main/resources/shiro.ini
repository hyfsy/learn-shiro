[users]
# 用户名 = 密码,角色1,角色2...
admin = secret, admin
guest = guest, guest
aa = 123456, guest

[roles]
# 角色 = 权限 (* 代表所有权限)
admin = *
guest = see
aa = see
bb = user:see
cc = "user:see, see"
cc = "user:*:see"
# see = see:xxx


[main]
# 实现了Nameable的接口会调用setName方法
h = com.hyf.shiro.local.config.CustomRememberMeManager
h.name = hhh
# iniRealm(has users and roles) 和 securityManager 是系统内置的
securityManager.rememberMeManager = $h

shiro.loginUrl = /login.jsp
authc.successUrl = /whatever

iniObject = com.hyf.shiro.spring.config.IniObject
iniObject.string = string
iniObject.stringList = 1, 2
iniObject.stringMap = key1:1, key2:2
iniObject.securityManager = $securityManager


[urls]
/assets/** = anon
/user/signin = anon
/user/signup = logout
/user/** = user

/rest/** = perms[rest:invoke, rest:see], authc
/login.jsp = anon
/error = anon
/logout = logout
/account/** = authc
/** = authc


### 内置Filter

# 匿名，一切皆可访问
## /anon = anon
# 账号密码登录，包括记住我
## /authc = authc
# Basic Base64(username:password) 请求头登录
## /authcBasic = authcBasic
# Bearer token 请求头登录
## /authcBearer = authcBearer
# 执行注销机制
## /logout = logout
# 禁用session机制
## /noSessionCreation = noSessionCreation
# 校验权限
## /perms = perms
# 校验指定端口
## /port = port
# 校验权限，权限后会加上请求方法(permission:get/read)
## /rest = rest
# 校验角色
## /roles = roles
# 校验https并且为指定端口
## /ssl = ssl
# 用户认证过才能访问
## /user = user
# global，检验 uri/servlet-path/path-info 中是否存在非法字符
## /invalidRequest = invalidRequest
